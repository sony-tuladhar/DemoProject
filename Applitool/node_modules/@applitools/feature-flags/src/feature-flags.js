'use strict'
const assert = require('assert')

const featureFlagsVar = Symbol('featureFlags')

setNonEnvironmentVariableSource(process.env.FEATURE_FLAGS)

/**
 * @callback GetFeatureFlag
 * @param {string} featureFlagName
 * @param {object} query?
 * @param {string} query.account?
 *
 * @returns {boolean}
 */

/**
 *
 * @param {string} featureFlagName
 * @param {object} query?
 * @param {string} query.account?
 *
 * @returns {boolean}
 */
function isFeatureEnabled(featureFlagName, {account} = {}) {
  const featureFlagsVarValue = global[featureFlagsVar]
  if (featureFlagsVarValue === '*') return true

  const featureFlagValue = global[featureFlagsVar][featureFlagName]

  if (featureFlagValue == null) {
    return false
  } else if (featureFlagValue === true || featureFlagValue === false) {
    return featureFlagValue
  } else if (typeof featureFlagValue === 'object') {
    const whitelistAccounts = [].concat(featureFlagValue.account)

    const passPercentage =
      featureFlagValue.rolloutPercentage !== undefined
        ? Math.random() * 100 < featureFlagValue.rolloutPercentage
        : true
    const passAccount = account || whitelistAccounts ? whitelistAccounts.includes(account) : true

    return passPercentage && passAccount
  } else {
    // I have no idea what this feature flag is. Better play it safe and return false.
    return false
  }
}

/**
 *
 * @param {string|object} featureFlagsStringOrJson?
 * @returns {GetFeatureFlag}
 */
function setNonEnvironmentVariableSource(featureFlagsStringOrJson) {
  if (featureFlagsStringOrJson === '*') {
    global[featureFlagsVar] = '*'
  } else if (typeof featureFlagsStringOrJson === 'string') {
    global[featureFlagsVar] = featureFlagsStringOrJson ? JSON.parse(featureFlagsStringOrJson) : {}
  } else if (typeof featureFlagsStringOrJson === 'object' && featureFlagsStringOrJson !== null) {
    global[featureFlagsVar] = featureFlagsStringOrJson
  } else if (featureFlagsStringOrJson === undefined) {
    global[featureFlagsVar] = {}
  } else {
    assert.fail(
      `setting feature flags only with a JSON-able string or an object, but you sent me: ${featureFlagsStringOrJson}`,
    )
  }

  return isFeatureEnabled
}

/**
 * @returns {object}
 */
function getRawFeatureFlags() {
  return global[featureFlagsVar]
}

module.exports = isFeatureEnabled
module.exports.nonEnvironmentVariableSource = setNonEnvironmentVariableSource
module.exports.getRawFeatureFlags = getRawFeatureFlags
